# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on: ["workflow_dispatch"]
#  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Sends all of the TODOs as a Issue
      #- name: "TODO to Issue"
      #  uses: "alstr/todo-to-issue-action@v2.4.1"
      #  id: "TODO"
      #  with:
      #    TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.0
        with:
          format: 'YYYY-MM-DD-HH-mm'

      - name: Install Python 3
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U future
          pip install pyinstaller==4.2 tinyaes==1.0.1
          python setup.py install

      #- name: Generate Report
      #  run: |
      #    pip install coverage
      #    coverage run -m unittest > results.txt 2>&1

      - name: Create Single File
        run: |
          ./setup.py package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Release_${{ steps.time.outputs.time }}
          release_name: Release_${{ steps.time.outputs.time }}
          body: Release_${{ steps.time.outputs.time }}

      - name: Create Single File
        run: |
          ls -altr dist

      - name: Upload coverage results to the Release
        id: upload-release-asset-resume
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          #asset_path: ${{ github.workspace }}/dist/CryptoGuard.sh
          asset_path: dist/cryptoguard4py.sh
          asset_name: cryptoguard4py.sh
          asset_content_type: application/x-sh

      #- name: Upload coverage results to the Release
      #  id: upload-release-asset-resume
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: ${{ github.workspace }}/results.txt
      #    asset_name: results.txt
      #    asset_content_type: application/txt
